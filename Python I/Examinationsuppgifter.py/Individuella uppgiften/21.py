import random
import os
# Skapar klass Kort.

class Kort:

    # Attribut f√∂r klassen Kort
    def __init__(self, val√∂r, f√§rg, v√§rde):
        self.val√∂r = val√∂r
        self.f√§rg = f√§rg
        self.v√§rde = v√§rde

    # Metod f√∂r att kunna printa ut kortets f√§rg och val√∂r.
    def visa_kort(self):
        print(f"{self.f√§rg}{self.val√∂r}")

    # Metod f√∂r att kunna ha tillg√•ng till v√§rdet s√• man kan r√§kna och j√§mf√∂ra v√§rdena i kortspelet
    def get_v√§rde(self):
        return self.v√§rde


# Klass f√∂r kortlek.
class Kortlek:
    # N√§r jag skapar ett objekt av klassen Kortlek kommer den ha en tom lista
    # f√∂r kortlek som fylls med 52 kort samt blandar dessa kort.
    def __init__(self):
        # Lagrar kortlekens kort.
        self.kortlek = []
        # Anropar metoden skapa kortlek
        self.skapa_kortlek()
        # Anropar metoden blandning av kortlek
        self.blanda()

    # Metod f√∂r att skapa kortlek med 52 kort med f√§rg, val√∂r och v√§rde.
    def skapa_kortlek(self):
        f√§rger = ["‚ô†", "‚ô•", "‚ô¶", "‚ô£"]
        val√∂rer = ["A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "Knekt", "Dam", "Kung"]
        # N√§stlade loopar f√∂r att skapa en kortlek med 52 kort.
        for f√§rg in f√§rger:
            for val√∂r in val√∂rer:
                # Best√§mmer det numeriska v√§rdet f√∂r varje val√∂r
                if val√∂r == "A":
                    v√§rde = 14
                elif val√∂r == "Knekt":
                    v√§rde = 11
                elif val√∂r == "Dam":
                    v√§rde = 12
                elif val√∂r == "Kung":
                    v√§rde = 13
                else:
                    v√§rde = int(val√∂r)
                # Skapar kortobjekt
                upps√§ttning = Kort(f√§rg, val√∂r, v√§rde)
                # L√§gger kortobjekt till kortlek
                self.kortlek.append(upps√§ttning)

    # Metod f√∂r att blanda kortlek
    def blanda(self):
        random.shuffle(self.kortlek)

    def dela(self):
        return self.kortlek.pop()


# Klass Spelare
class Spelare:
    def __init__(self, kortlek):
        # Attribut f√∂r klass Spelare.
        # Vill att alla spelare ska spela under omg√•ngen med samma kortlek.
        self.kortlek = kortlek
        # Tom lista f√∂r att spara spelarens kort i hand
        self.hand = []
        # H√•ller reda p√• spelarens po√§ng
        self.po√§ng = 0
        # H√•ller reda p√• antal Ess f√∂r spelaren
        self.Ess = 0
        # Anropa metod spelstart s√• fort man skapar instans av Spelare
        self.spelstart()

    # Metod f√∂r att visa kort i handen f√∂r spelaren samt po√§ngsumma.
    def visa_hand(self):
        for kort_i_hand in self.hand:
            # metod fr√•n klass Kortlek
            kort_i_hand.visa_kort()
        print("Po√§ng:", self.po√§ng)

    def spelstart(self):
        # Funktion starta spel d√§r 2 kort utdelas till spelare.
        for kortutdelning in range(2):
            # metod fr√•n klassen Kortlek
            kort = self.kortlek.dela()
            self.hand.append(kort)
            # metod fr√•n klassen Kort
            self.po√§ng += kort.get_v√§rde()
            # Om dragna kortet √§r Ess
            if kort.get_v√§rde() == 14:
                # Ess adderas till self.Ess
                self.Ess += 1
        # Justera v√§rdet f√∂r Ess vid behov
        if self.po√§ng > 21:
            self.justera_po√§ng()

    # Metod dra ett kort och hantera Ess och v√§rde, ganska lik metod spelstart.
    # Skillnaden √§r att det g√∂rs ett kort i taget s√• l√§nge po√§ngen inte √§r > 21.
    def dra_kort(self):
        kort = self.kortlek.dela()
        self.hand.append(kort)
        self.po√§ng += kort.get_v√§rde()
        if kort.get_v√§rde() == 14:
            self.Ess += 1
        if self.po√§ng > 21:
            self.justera_po√§ng()

    # Metod f√∂r att hantera v√§rdet f√∂r Ess
    def justera_po√§ng(self):
        # Dra av 13 po√§ng f√∂r varje Ess och ta bort ett Ess fr√•n self.Ess
        if self.Ess:
            self.Ess -= 1
            self.po√§ng -= 13

    # Metod f√∂r att hantera j√§mf√∂relse av po√§ng och kunna utse vinnare
    def __gt__(self, other):
        # Denna metod j√§mf√∂r det till v√§nster om operatorn med det till h√∂ger och returnerar True om sant
        # H√§r vill jag bara j√§mf√∂ra po√§ngen och inget annat.
        return self.po√§ng > other.po√§ng

    def __ge__(self, other):
        return self.po√§ng >= other.po√§ng


# Skapar evighetsloop f√∂r att spela s√• m√•nga omg√•ngar som anv√§ndaren vill.
while True:
    # Rensar terminalen
    os.system("clear")
    kortlek = Kortlek()
    spelare = Spelare(kortlek)
    # Visa hand f√∂r spelaren
    spelare.visa_hand()
    while spelare.po√§ng <= 21:
        plus1 = input("Vill du ta ett till kort? j/n: ").lower()
        if plus1 == "j":
            # Vid ja, dra ett kort och spara v√§rde, kort och ESS.
            spelare.dra_kort()
            # Visa hand efter nytt kortdragning
            spelare.visa_hand()
            # Om spelaren har spruckit avbryts omg√•ngen
            if spelare.po√§ng > 21:
                print(f"Du har spruckit! üí£")
                break
        # Vid nej samt att spelaren inte har spruckit ska spelet forts√§tta
        else:
            print("Bankirens tur: ")
            bankir = Spelare(kortlek)
            # H√§r vill jag att bankir ska alltid f√∂rs√∂ka sl√• spelaren och ha en f√∂rdel.
            while bankir.po√§ng < 21 and spelare > bankir:
                bankir.dra_kort()
            # J√§mf√∂ra po√§ngen och utse vinnaren.
            bankir.visa_hand()
            if bankir.po√§ng > 21:
                print("Du vinner")
            elif bankir >= spelare:
                print("Bankir vinner")
            else:
                print("Du vinner")
            break
    ny_runda = input("Spela igen? j/n: ").lower()
    if ny_runda != "j":
        break
